namespace a
{
	struct Z
	{
	};
}
void* operator++			(a::Z&, int);
void* operator--			(a::Z&, int);
void* operator++			(a::Z&);
void* operator--			(a::Z&);
void* operator~				(a::Z&);
void* operator!				(a::Z&);
void* operator-				(a::Z&);
void* operator+				(a::Z&);
void* operator&				(a::Z&);
void* operator*				(a::Z&);
void* operator*				(a::Z&, int);
void* operator/				(a::Z&, int);
void* operator%				(a::Z&, int);
void* operator+				(a::Z&, int);
void* operator-				(a::Z&, int);
void* operator<<			(a::Z&, int);
void* operator>>			(a::Z&, int);
void* operator==			(a::Z&, int);
void* operator!=			(a::Z&, int);
void* operator<				(a::Z&, int);
void* operator<=			(a::Z&, int);
void* operator>				(a::Z&, int);
void* operator>=			(a::Z&, int);
void* operator&				(a::Z&, int);
void* operator|				(a::Z&, int);
void* operator^				(a::Z&, int);
void* operator&&			(a::Z&, int);
void* operator||			(a::Z&, int);
void* operator*=			(a::Z&, int);
void* operator/=			(a::Z&, int);
void* operator%=			(a::Z&, int);
void* operator+=			(a::Z&, int);
void* operator-=			(a::Z&, int);
void* operator<<=			(a::Z&, int);
void* operator>>=			(a::Z&, int);
void* operator&=			(a::Z&, int);
void* operator|=			(a::Z&, int);
void* operator^=			(a::Z&, int);
void* operator,				(a::Z&, int);
void* operator*				(int, a::Z&);
void* operator/				(int, a::Z&);
void* operator%				(int, a::Z&);
void* operator+				(int, a::Z&);
void* operator-				(int, a::Z&);
void* operator<<			(int, a::Z&);
void* operator>>			(int, a::Z&);
void* operator==			(int, a::Z&);
void* operator!=			(int, a::Z&);
void* operator<				(int, a::Z&);
void* operator<=			(int, a::Z&);
void* operator>				(int, a::Z&);
void* operator>=			(int, a::Z&);
void* operator&				(int, a::Z&);
void* operator|				(int, a::Z&);
void* operator^				(int, a::Z&);
void* operator&&			(int, a::Z&);
void* operator||			(int, a::Z&);
void* operator*=			(int, a::Z&);
void* operator/=			(int, a::Z&);
void* operator%=			(int, a::Z&);
void* operator+=			(int, a::Z&);
void* operator-=			(int, a::Z&);
void* operator<<=			(int, a::Z&);
void* operator>>=			(int, a::Z&);
void* operator&=			(int, a::Z&);
void* operator|=			(int, a::Z&);
void* operator^=			(int, a::Z&);
void* operator,				(int, a::Z&);

bool* operator++			(const a::Z&, int);
bool* operator--			(const a::Z&, int);
bool* operator++			(const a::Z&);
bool* operator--			(const a::Z&);
bool* operator~				(const a::Z&);
bool* operator!				(const a::Z&);
bool* operator-				(const a::Z&);
bool* operator+				(const a::Z&);
bool* operator&				(const a::Z&);
bool* operator*				(const a::Z&);
bool* operator*				(const a::Z&, int);
bool* operator/				(const a::Z&, int);
bool* operator%				(const a::Z&, int);
bool* operator+				(const a::Z&, int);
bool* operator-				(const a::Z&, int);
bool* operator<<			(const a::Z&, int);
bool* operator>>			(const a::Z&, int);
bool* operator==			(const a::Z&, int);
bool* operator!=			(const a::Z&, int);
bool* operator<				(const a::Z&, int);
bool* operator<=			(const a::Z&, int);
bool* operator>				(const a::Z&, int);
bool* operator>=			(const a::Z&, int);
bool* operator&				(const a::Z&, int);
bool* operator|				(const a::Z&, int);
bool* operator^				(const a::Z&, int);
bool* operator&&			(const a::Z&, int);
bool* operator||			(const a::Z&, int);
bool* operator*=			(const a::Z&, int);
bool* operator/=			(const a::Z&, int);
bool* operator%=			(const a::Z&, int);
bool* operator+=			(const a::Z&, int);
bool* operator-=			(const a::Z&, int);
bool* operator<<=			(const a::Z&, int);
bool* operator>>=			(const a::Z&, int);
bool* operator&=			(const a::Z&, int);
bool* operator|=			(const a::Z&, int);
bool* operator^=			(const a::Z&, int);
bool* operator,				(const a::Z&, int);
bool* operator*				(int, const a::Z&);
bool* operator/				(int, const a::Z&);
bool* operator%				(int, const a::Z&);
bool* operator+				(int, const a::Z&);
bool* operator-				(int, const a::Z&);
bool* operator<<			(int, const a::Z&);
bool* operator>>			(int, const a::Z&);
bool* operator==			(int, const a::Z&);
bool* operator!=			(int, const a::Z&);
bool* operator<				(int, const a::Z&);
bool* operator<=			(int, const a::Z&);
bool* operator>				(int, const a::Z&);
bool* operator>=			(int, const a::Z&);
bool* operator&				(int, const a::Z&);
bool* operator|				(int, const a::Z&);
bool* operator^				(int, const a::Z&);
bool* operator&&			(int, const a::Z&);
bool* operator||			(int, const a::Z&);
bool* operator*=			(int, const a::Z&);
bool* operator/=			(int, const a::Z&);
bool* operator%=			(int, const a::Z&);
bool* operator+=			(int, const a::Z&);
bool* operator-=			(int, const a::Z&);
bool* operator<<=			(int, const a::Z&);
bool* operator>>=			(int, const a::Z&);
bool* operator&=			(int, const a::Z&);
bool* operator|=			(int, const a::Z&);
bool* operator^=			(int, const a::Z&);
bool* operator,				(int, const a::Z&);